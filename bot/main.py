# bot/main.py

import sys
import asyncio
import os

# === –ù–∞ Windows –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π –Ω–∞ SelectorEventLoop ===
if sys.platform.startswith("win"):
    from asyncio import WindowsSelectorEventLoopPolicy
    asyncio.set_event_loop_policy(WindowsSelectorEventLoopPolicy())
# =============================================================

from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv

from utils.logger import setup_logger
from bot.router import router

# 1. –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –≤ —Ñ–∞–π–ª–µ .env")

# 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = setup_logger("zoo_totem_bot")
logger.info("üöÄ –ó–∞–ø—É—Å–∫ ZooTotemBot‚Ä¶")

async def main():
    # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher(storage=MemoryStorage())
    dp.include_router(router)

    try:
        # 4. –ó–∞–ø—É—Å–∫ –ø–æ–ª–ª–∏–Ω–≥–∞ Telegram
        await dp.start_polling(bot)
    except Exception:
        logger.exception("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞")
    finally:
        # 5. –ó–∞–∫—Ä—ã–≤–∞–µ–º HTTP-—Å–µ—Å—Å–∏—é –±–æ—Ç–∞
        await bot.session.close()
        logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    # 6. –ó–∞–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤–Ω—ã–π –∫–æ—Ä—É—Ç–∏–Ω —á–µ—Ä–µ–∑ asyncio
    asyncio.run(main())
