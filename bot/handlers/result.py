# bot/handlers/result.py

import os
import json
import logging
from collections import defaultdict

from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from bot.services.media import generate_image  # —Å–µ—Ä–≤–∏—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–∏–Ω–æ–∫

router = Router()
logger = logging.getLogger("zoo_totem_bot.result")

# –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∂–∏–≤–æ—Ç–Ω—ã—Ö
ANIMALS_PATH = os.path.join("data", "animals.json")
with open(ANIMALS_PATH, encoding="utf-8") as f:
    ANIMALS = json.load(f)
logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ {len(ANIMALS)} –∂–∏–≤–æ—Ç–Ω—ã—Ö")

async def show_result(message: types.Message, state: FSMContext):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã."""
    data = await state.get_data()
    answers = data.get("answers", [])

    # 1) –ü–æ–¥—Å—á—ë—Ç –±–∞–ª–ª–æ–≤
    score = defaultdict(int)
    for weight_list in answers:
        for animal in weight_list:
            score[animal] += 1

    if not score:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.")
        return

    # 2) –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ—Ç–µ–º–∞ (–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª)
    totem_key = max(score.items(), key=lambda x: x[1])[0]
    animal = ANIMALS.get(totem_key)
    if not animal:
        await message.answer("‚ö†Ô∏è –í–∞—à–µ —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ.")
        return

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} ‚Äî —Ç–æ—Ç–µ–º: {animal['name']} ({score[totem_key]} –æ—á–∫–æ–≤)")

    # 3) –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º –∏ –ø–æ–¥–ø–∏—Å—è–º–∏
    try:
        image_path = await generate_image(
            image_path=animal["image"],
            animal_name=animal["name"],
            user_name=message.from_user.first_name
        )
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏—Ç–æ–≥–æ–≤–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏")
        image_path = None

    # 4) –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
    caption = (
        f"üéâ *–¢–≤–æ—ë —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ ‚Äî {animal['name']}!*\n\n"
        f"_{animal['description']}_\n\n"
        f"[–£–∑–Ω–∞—Ç—å –æ–± –æ–ø–µ–∫–µ]({animal['guardian_link']})"
    )

    # 5) –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÅ –ï—â—ë —Ä–∞–∑", callback_data="start_quiz")],
        [InlineKeyboardButton(text="üì¢ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è", callback_data=f"share_{totem_key}")],
        [InlineKeyboardButton(text="üí¨ –û—Ç–∑—ã–≤", callback_data="feedback")],
        [InlineKeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è", callback_data=f"contact_{totem_key}")]
    ])

    # 6) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if image_path:
        await message.answer_photo(
            photo=types.FSInputFile(image_path),
            caption=caption,
            parse_mode="Markdown",
            reply_markup=kb
        )
    else:
        # –ï—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–∞—Å—å ‚Äî —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        await message.answer(
            caption,
            parse_mode="Markdown",
            reply_markup=kb
        )

    # 7) –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
